{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nimport { Loader } from \"@googlemaps/js-api-loader\";\nvar loader = new Loader({\n  apiKey: process.env.GOOGLE_MAP_API_KEY,\n  version: \"weekly\"\n});\nvar map;\nloader.load().then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var geocoder, marker, inputAddress;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          geocoder = new google.maps.Geocoder();\n          map = new google.maps.Map(document.getElementById('map'), {\n            center: {\n              lat: 40.7828,\n              lng: -73.9653\n            },\n            zoom: 12\n          });\n          marker = new google.maps.Marker({\n            position: {\n              lat: 40.7828,\n              lng: -73.9653\n            },\n            map: map\n          });\n          inputAddress = document.getElementById('address').textContent;\n          _context.next = 6;\n          return geocoder.geocode({\n            'address': inputAddress\n          }, function (results, status) {\n            if (status == 'OK') {\n              map.setCenter(results[0].geometry.location);\n              var marker = new google.maps.Marker({\n                map: map,\n                position: results[0].geometry.location\n              });\n            } else {\n              alert('該当する結果がありませんでした：' + status);\n            }\n          });\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nwindow.addEventListener('DOMContentLoaded', function () {// setTimeout(codeAddress(),10)\n});","map":{"version":3,"sources":["C:/Users/Taku0708/Desktop/junkissan/app/javascript/packs/show_map.js"],"names":["Loader","loader","apiKey","process","env","GOOGLE_MAP_API_KEY","version","map","load","then","geocoder","google","maps","Geocoder","Map","document","getElementById","center","lat","lng","zoom","marker","Marker","position","inputAddress","textContent","geocode","results","status","setCenter","geometry","location","alert","window","addEventListener"],"mappings":";;;;;;AAAA,SAASA,MAAT,QAAuB,2BAAvB;AACA,IAAMC,MAAM,GAAG,IAAID,MAAJ,CAAW;AACtBE,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,kBADE;AAEtBC,EAAAA,OAAO,EAAE;AAFa,CAAX,CAAf;AAII,IAAIC,GAAJ;AAEAN,MAAM,CAACO,IAAP,GAAcC,IAAd,wEAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBC,UAAAA,QAAQ,GAAG,IAAIC,MAAM,CAACC,IAAP,CAAYC,QAAhB,EAAX;AAEAN,UAAAA,GAAG,GAAG,IAAII,MAAM,CAACC,IAAP,CAAYE,GAAhB,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,KAAxB,CAApB,EAAoD;AACxDC,YAAAA,MAAM,EAAE;AAACC,cAAAA,GAAG,EAAE,OAAN;AAAeC,cAAAA,GAAG,EAAC,CAAC;AAApB,aADgD;AAExDC,YAAAA,IAAI,EAAE;AAFkD,WAApD,CAAN;AAKGC,UAAAA,MATgB,GASP,IAAIV,MAAM,CAACC,IAAP,CAAYU,MAAhB,CAAuB;AACjCC,YAAAA,QAAQ,EAAG;AAACL,cAAAA,GAAG,EAAE,OAAN;AAAeC,cAAAA,GAAG,EAAC,CAAC;AAApB,aADsB;AAEjCZ,YAAAA,GAAG,EAAEA;AAF4B,WAAvB,CATO;AAafiB,UAAAA,YAbe,GAaAT,QAAQ,CAACC,cAAT,CAAwB,SAAxB,EAAmCS,WAbnC;AAAA;AAAA,iBAcbf,QAAQ,CAACgB,OAAT,CAAkB;AAAE,uBAAWF;AAAb,WAAlB,EAA8C,UAASG,OAAT,EAAkBC,MAAlB,EAA0B;AAC5E,gBAAIA,MAAM,IAAI,IAAd,EAAoB;AAClBrB,cAAAA,GAAG,CAACsB,SAAJ,CAAcF,OAAO,CAAC,CAAD,CAAP,CAAWG,QAAX,CAAoBC,QAAlC;AACA,kBAAIV,MAAM,GAAG,IAAIV,MAAM,CAACC,IAAP,CAAYU,MAAhB,CAAuB;AAChCf,gBAAAA,GAAG,EAAEA,GAD2B;AAEhCgB,gBAAAA,QAAQ,EAAEI,OAAO,CAAC,CAAD,CAAP,CAAWG,QAAX,CAAoBC;AAFE,eAAvB,CAAb;AAID,aAND,MAMO;AACLC,cAAAA,KAAK,CAAC,qBAAqBJ,MAAtB,CAAL;AACD;AACF,WAVK,CAda;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAnB;AAkCJK,MAAM,CAACC,gBAAP,CAAwB,kBAAxB,EAA4C,YAAM,CAC9C;AAEH,CAHD","sourcesContent":["import { Loader } from \"@googlemaps/js-api-loader\"\r\nconst loader = new Loader({\r\n    apiKey: process.env.GOOGLE_MAP_API_KEY,\r\n    version: \"weekly\",\r\n    });\r\n    let map\r\n\r\n    loader.load().then(async() => {\r\n        let geocoder\r\n    geocoder = new google.maps.Geocoder()\r\n  \r\n    map = new google.maps.Map(document.getElementById('map'), {\r\n      center: {lat: 40.7828, lng:-73.9653},\r\n      zoom: 12,\r\n    });\r\n  \r\n   var marker = new google.maps.Marker({\r\n      position:  {lat: 40.7828, lng:-73.9653},\r\n      map: map\r\n    });\r\n    var inputAddress = document.getElementById('address').textContent\r\n    await geocoder.geocode( { 'address': inputAddress}, function(results, status) {\r\n      if (status == 'OK') {\r\n        map.setCenter(results[0].geometry.location);\r\n        var marker = new google.maps.Marker({\r\n            map: map,\r\n            position: results[0].geometry.location\r\n        });\r\n      } else {\r\n        alert('該当する結果がありませんでした：' + status);\r\n      }\r\n    }); \r\n        });\r\n    \r\n    \r\n\r\n      \r\n     \r\n\r\n      \r\n\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    // setTimeout(codeAddress(),10)\r\n    \r\n});"]},"metadata":{},"sourceType":"module"}